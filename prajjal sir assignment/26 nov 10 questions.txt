1.You have an array of integers. Write a function to find the maximum element in the array in time.
[2, 8, 1, 5, 10, 4]
10

#include <bits/stdc++.h>
using namespace std;

int findMax(vector<int> arr) {
    int max = arr[0];  
    for (auto it : arr) { 
        if (it > max) {
            max = it;
        }
    }
    return max;
}

int main() {
    vector<int> arr = {2, 8, 1, 5, 10, 4};  
    
    int a = findMax(arr);  
    
    cout << a;  
    return 0;
}
---------------------------------------------------------------------------------------------------------------------------

2.Write a function to calculate the sum of all elements in an array in time.
[3, 5, 7, 2]
17

#include <bits/stdc++.h>
using namespace std;

int calculatesum(vector<int> arr) {
    int sum = 0;
    for (auto it : arr) {
        sum += it;
    }
    return sum;
}

int main() {
    vector<int> arr = {3, 5, 7, 2};  
    
    int a = calculatesum(arr);  
    
    cout << a;  
    return 0;
}
---------------------------------------------------------------------------------------------------------------------

3.Given an array, count how many odd numbers are present in the array in time.
[4, 7, 9, 2, 3]
3

#include <bits/stdc++.h>
using namespace std;

int oddnum(vector<int> arr) {
    int count = 0;
    for (auto it : arr) {
        if (it % 2 != 0) {
            count++;
        }
    }
    return count;
}

int main() {
    vector<int> arr = {4, 7, 9, 2, 3};  
    
    int a = oddnum(arr);  
    
    cout << a;  
    return 0;
}
---------------------------------------------------------------------------------------------------------------------

4.Reverse the given array in time without using any additional space.
[1, 2, 3, 4, 5]
[5, 4, 3, 2, 1]

#include <bits/stdc++.h>
using namespace std;
 
void reversearr(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n / 2; i++) {
        swap(arr[i], arr[n - i - 1]);
    }
}

int main() {
    vector<int> arr = {1, 2, 3, 4, 5};  
    
    reversearr(arr);  
    
    for (auto it : arr) {
        cout << it ;
    }
 
    
    return 0;
}
------------------------------------------------------------------------------------------------------------------------------
5.Find the first repeating element in an array in time.
[10, 15, 10, 20, 15, 5]
10



----------------------------------------------------------------------------------------------------------------------------
6.Write a function to check if the array is sorted in non-decreasing order in time.
[1, 2, 3, 4, 5]
true
[1, 3, 2, 4, 5]
false

#include <bits/stdc++.h>
using namespace std;

bool issorted(vector<int> arr) {
    for (int i = 1; i < arr.size(); i++) {
        if (arr[i] < arr[i - 1]) {
            return false;
        }
    }
    return true;
}

int main() {
    vector<int> arr = {1, 2, 3, 4, 5};  
    
   bool a = issorted(arr);  
    
  cout << a;
    
    return 0;
}
----------------------------------------------------------------------------------------------------------
7.Given an array, move all zeros to the end of the array while maintaining the relative order of non-zero elements in time.
[0, 1, 0, 3, 12]
[1, 3, 12, 0, 0]

#include <bits/stdc++.h>
using namespace std;

void movezero(vector<int>& arr) {
    int n = arr.size(), j = 0;
    for (auto it : arr) {
        if (it != 0) {
            arr[j++] = it;
        }
    }
    while (j < n) {
        arr[j++] = 0;
    }
}

int main() {
    vector<int> arr = {0, 1, 0, 3, 12};  
    
    movezero(arr);   
    
    for (auto it : arr) {
        cout << it ;
    }
    
    
    return 0;
}
 

--------------------------------------------------------------------------------------------------------------
8.Generate a prefix sum array for the given array in time.
[1, 2, 3, 4]
[1, 3, 6, 10]

#include <bits/stdc++.h>
using namespace std;

vector<int>Prefixsum(vector<int> arr) {
    vector<int> prefixsum;
    int sum = 0;
    for (auto it : arr) {
        sum += it;
        prefixsum.push_back(sum);
    }
    return prefixsum;
}

int main() {
    vector<int> arr = {1, 2, 3, 4};   
   
    vector<int> prefixSum = Prefixsum(arr);
  
    for (auto it : prefixSum) {
        cout << it << "  " ;
    }
 
    
    return 0;
}


----------------------------------------------------------------------------------------------------------------
9.Given an array containing n-1 distinct numbers in the range 1 to n, find the missing number in time.
[1, 2, 4, 6, 5]
3



#include <bits/stdc++.h>
using namespace std;

 
int missingnum(vector<int>& arr, int n) {
    int sum = 0;
    
    int totalsum = ((n + 1) * (n + 2)) / 2;
     
    for (auto it : arr) {
        sum += it;
    }
    
    
    return totalsum - sum;
}

int main() {
    vector<int> arr = {1, 2, 4, 5}; 
    int n = arr.size();   
    
    int a = missingnum(arr, n);
    
    cout << a ;
    
    return 0;
}
 

-----------------------------------------------------------------------------------------------------------------
10.Perform one left rotation on the array in time.
[1, 2, 3, 4, 5]
[2, 3, 4, 5, 1]


#include <bits/stdc++.h>
using namespace std;

 
void leftrotate(vector<int>& arr) {
    int firstele = arr[0];
    int n = arr.size();
    
    for (int i = 0; i < n - 1; i++) {
        arr[i] = arr[i + 1];
    }
    
    arr[n - 1] = firstele;
}

int main() {
    vector<int> arr = {1, 2, 3, 4, 5};  
    
    leftrotate(arr);  
    
 
    for (auto it : arr) {
        cout << it << " ";
    }
    cout << endl;
    
    return 0;
}

