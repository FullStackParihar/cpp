 

  1. Write a C++ function that takes a character as input and uses nested if-else statements to determine if it is a vowel or consonant, considering both uppercase and lowercase letters.

#include <bits/stdc++.h>
using namespace std;

string checkVowelConsonant(char ch) {
    if (ch >= 'A' && ch <= 'Z') {  
        if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {
            return "Uppercase Vowel";
        } else {
            return "Uppercase Consonant";
        }
    } else if (ch >= 'a' && ch <= 'z') { 
        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
            return "Lowercase Vowel";
        } else {
            return "Lowercase Consonant";
        }
    } else {
        return "Not a letter";
    }
}

int main() {
    char ch;
    cout << "Enter a character: ";
    cin >> ch;

    string result = checkVowelConsonant(ch);
    cout << result << endl;

    return 0;
}


  2. Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is positive and even, positive and odd, negative and even, or negative and odd.

#include <bits/stdc++.h>
using namespace std;

string checkNumber(int num) {
    if (num >= 0) {  
        if (num % 2 == 0) {
            return "Positive Even";
        } else {
            return "Positive Odd";
        }
    } else {  
        if (num % 2 == 0) {
            return "Negative Even";
        } else {
            return "Negative Odd";
        }
    }
}

int main() {
    int num;
    cout << "Enter an integer: ";
    cin >> num;

    string result = checkNumber(num);
    cout << result << endl;

    return 0;
}


  3. Write a C++ function that takes a float as input and uses nested if-else statements to determine if the number is positive, negative, or zero, and whether it is a whole number or a fraction.


#include <bits/stdc++.h>
using namespace std;

string checkFloat(float num) {
    if (num > 0) {  
        if (num == static_cast<int>(num)) {
            return "Positive Whole Number";
        } else {
            return "Positive Fraction";
        }
    } else if (num < 0) {  
        if (num == static_cast<int>(num)) {
            return "Negative Whole Number";
        } else {
            return "Negative Fraction";
        }
    } else {
        return "Zero";
    }
}

int main() {
    float num;
    cout << "Enter a floating-point number: ";
    cin >> num;

    string result = checkFloat(num);
    cout << result << endl;

    return 0;
}

  4. Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is within a specific range (e.g., 1-100) and if it is divisible by 7.

#include <bits/stdc++.h>
using namespace std;

string checkRangeDivisibility(int num) {
    if (num >= 1 && num <= 100) {  
        if (num % 7 == 0) {
            return "Within Range and Divisible by 7";
        } else {
            return "Within Range but Not Divisible by 7";
        }
    } else {
        return "Not Within Range";
    }
}

int main() {
    int num;
    cout << "Enter an integer: ";
    cin >> num;

    string result = checkRangeDivisibility(num);
    cout << result << endl;

    return 0;
}


  5. Write a C++ function that takes two integers as input and uses nested if-else statements to determine if both numbers are positive, both are negative, or one is positive and the other is negative.

#include <bits/stdc++.h>
using namespace std;

string checkNumbers(int a, int b) {
    if (a >= 0) {  
        if (b >= 0) {
            return "Both Positive";
        } else {
            return "First Positive, Second Negative";
        }
    } else { // First number is negative
        if (b >= 0) {
            return "First Negative, Second Positive";
        } else {
            return "Both Negative";
        }
    }
}

int main() {
    int a, b;
    cout << "Enter two integers: ";
    cin >> a >> b;

    string result = checkNumbers(a, b);
    cout << result << endl;

    return 0;
}

  6. Write a C++ function that takes three angles as input and uses nested if-else statements to determine if they can form a right-angled triangle, an obtuse triangle, or an acute triangle.

#include <bits/stdc++.h>
using namespace std;

string checkTriangle(int angle1, int angle2, int angle3) {
    if (angle1 + angle2 + angle3 == 180) {  
        if (angle1 == 90 || angle2 == 90 || angle3 == 90) {
            return "Right-Angled Triangle";
        } else if (angle1 > 90 || angle2 > 90 || angle3 > 90) {
            return "Obtuse Triangle";
        } else {
            return "Acute Triangle";
        }
    } else {
        return "Not a Triangle";
    }
}

int main() {
    int angle1, angle2, angle3;
    cout << "Enter three angles: ";
    cin >> angle1 >> angle2 >> angle3;

    string result = checkTriangle(angle1, angle2, angle3);
    cout << result << endl;

    return 0;
}


  7. Write a C++ function that takes the coordinates of a point (x, y) as input and uses nested if-else statements to determine in which quadrant the point lies.


#include <bits/stdc++.h>
using namespace std;

string checkQuadrant(int x, int y) {
    if (x > 0) {  
        if (y > 0) {
            return "First Quadrant";
        } else if (y < 0) {
            return "Fourth Quadrant";
        } else {
            return "On the Positive X-Axis";
        }
    } else if (x < 0) { 
        if (y > 0) {
            return "Second Quadrant";
        } else if (y < 0) {
            return "Third Quadrant";
        } else {
            return "On the Negative X-Axis";
        }
    } else {  
        if (y > 0) {
            return "On the Positive Y-Axis";
        } else if (y < 0) {
            return "On the Negative Y-Axis";
        } else {
            return "At the Origin";
        }
    }
}

int main() {
    int x, y;
    cout << "Enter the coordinates (x y): ";
    cin >> x >> y;

    string result = checkQuadrant(x, y);
    cout << result << endl;

    return 0;
}

  8. Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is a perfect cube or not.


#include <bits/stdc++.h>
using namespace std;

string checkPerfectCube(int num) {
    int cubeRoot = round(cbrt(num));
    if (cubeRoot * cubeRoot * cubeRoot == num) {
        return "Perfect Cube";
    } else {
        return "Not a Perfect Cube";
    }
}

int main() {
    int num;
    cout << "Enter an integer: ";
    cin >> num;

    string result = checkPerfectCube(num);
    cout << result << endl;

    return 0;
}


  9. Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is a power of 2 or not.

#include <bits/stdc++.h>
using namespace std;

string checkPowerOf2(int num) {
    if (num > 0) {
        if ((num & (num - 1)) == 0) {
            return "Power of 2";
        } else {
            return "Not a Power of 2";
        }
    } else {
        return "Not a Power of 2";
    }
}

int main() {
    int num;
    cout << "Enter an integer: ";
    cin >> num;

    string result = checkPowerOf2(num);
    cout << result << endl;

    return 0;
}

  10. Write a C++ function that takes a character as input and uses nested if-else statements to determine if it is a digit, uppercase letter, lowercase letter, or a special character.

#include <bits/stdc++.h>
using namespace std;

string checkCharacterType(char ch) {
    if (ch >= 'A' && ch <= 'Z') {
        return "Uppercase Letter";
    } else if (ch >= 'a' && ch <= 'z') {
        return "Lowercase Letter";
    } else if (ch >= '0' && ch <= '9') {
        return "Digit";
    } else {
        return "Special Character";
    }
}

int main() {
    char ch;
    cout << "Enter a character: ";
    cin >> ch;

    string result = checkCharacterType(ch);
    cout << result << endl;

    return 0;
}

  11. Write a C++ function that takes three integers as input and uses nested if-else statements to determine if they form an arithmetic progression (AP), geometric progression (GP), or neither.

// Write a C++ function that takes three integers as input and uses nested if-else statements to determine if they form an arithmetic progression (AP),
// geometric progression (GP), or neither.


#include <bits/stdc++.h>
using namespace std;

string checkProgression(int a, int b, int c) {
    if (a == b && b == c) {
        return "The numbers form an Arithmetic Progression (AP) and a Geometric Progression (GP).";
    } 
    else {
    
        if (2 * b == a + c) {
            return "The numbers form an Arithmetic Progression (AP)." ;
        } else {
            
            if (a != 0 && c != 0 && b * b == a * c) {
                return  "The numbers form a Geometric Progression (GP)." ;
            } else {
                return "The numbers form neither an Arithmetic Progression (AP) nor a Geometric Progression (GP)." ;
            }
        }
    }
}

int main() {
    int a, b, c;
    cout << "Enter three integers: ";
    cin >> a >> b >> c;

    cout<< checkProgression(a, b, c);

    return 0;
}  

12. Write a C++ function that takes a single digit as input and uses nested if-else statements to determine if it is even or odd and if it is prime or not.

#include <bits/stdc++.h>
using namespace std;

string checkDigit(int digit) {
    if (digit >= 0 && digit <= 9) {
        if (digit % 2 == 0) {
            if (digit == 2) {
                return "Even and Prime";
            } else {
                return "Even and Not Prime";
            }
        } else {
            if (digit == 1 || digit == 9) {
                return "Odd and Not Prime";
            } else {
                return "Odd and Prime";
            }
        }
    } else {
        return "Not a Single Digit";
    }
}

int main() {
    int digit;
    cout << "Enter a single digit: ";
    cin >> digit;

    string result = checkDigit(digit);
    cout << result << endl;

    return 0;
}

  13. Write a C++ function that takes two integers as input and uses nested if-else statements to determine if the first is a multiple of the second, and if the second is a multiple of the first.


#include <bits/stdc++.h>
using namespace std;

string checkMultiples(int a, int b) {
    if (b != 0 && a % b == 0) {
        return "First is a Multiple of Second";
    } else if (a != 0 && b % a == 0) {
        return "Second is a Multiple of First";
    } else {
        return "Neither is a Multiple of the Other";
    }
}

int main() {
    int a, b;
    cout << "Enter two integers: ";
    cin >> a >> b;

    string result = checkMultiples(a, b);
    cout << result << endl;

    return 0;
}

  14. Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is a strong number (sum of factorials of digits equals the number) or not.

#include <bits/stdc++.h>
using namespace std;

int factorial(int n) {
    if (n == 0 || n == 1) return 1;
    return n * factorial(n - 1);
}

string checkStrongNumber(int num) {
    int sum = 0, temp = num;
    while (temp > 0) {
        sum += factorial(temp % 10);
        temp /= 10;
    }
    if (sum == num) {
        return "Strong Number";
    } else {
        return "Not a Strong Number";
    }
}

int main() {
    int num;
    cout << "Enter an integer: ";
    cin >> num;

    string result = checkStrongNumber(num);
    cout << result << endl;

    return 0;
}

  15. Write a C++ function that takes a character as input and uses nested if-else statements to determine if it is a letter and if it is a vowel or consonant, or if it is a digit.
 
#include <bits/stdc++.h>
using namespace std;

string checkCharType(char ch) {
    if (ch >= 'A' && ch <= 'Z') { 
        if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {
            return "Uppercase Vowel";
        } else {
            return "Uppercase Consonant";
        }
    } else if (ch >= 'a' && ch <= 'z') { 
        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
            return "Lowercase Vowel";
        } else {
            return "Lowercase Consonant";
        }
    } else if (ch >= '0' && ch <= '9') {  
        return "Digit";
    } else {
        return "Not a Letter or Digit";
    }
}

int main() {
    char ch;
    cout << "Enter a character: ";
    cin >> ch;

    string result = checkCharType(ch);
    cout << result << endl;

    return 0;
}

 16. Write a C++ function that takes two integers as input and uses nested if-else statements to determine if their sum is even or odd, and if it is greater than a specific number.

/ Write a C++ function that takes two integers as input and uses nested if-else statements to determine if their sum is even or odd, and if it is greater than a specific number.

#include <bits/stdc++.h>
using namespace std;

string checkSum(int a, int b, int target)
{
    int sum = a + b;
    if (sum % 2 == 0)
    {
        if (sum > target)
        {
            return "Sum is even and greater than target";
        }
        else
        {
            return "Sum is even and not greater than target";
        }
    }
    else
    {
        if (sum > target)
        {
            return "Sum is odd and greater than target";
        }
        else
        {
            return "Sum is odd and not greater than target";
        }
    }
}

int main()
{
    int a, b, target;
    cout << "Enter two numbers : ";
    cin >> a >> b;
    cout << "Enter the target : ";
    cin >> target;

    cout << checkSum(a, b, target);

    return 0;
}


  17. Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is prime and if it is less than a specific value.

// Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is prime and if it is less than a specific value.

#include <bits/stdc++.h>
using namespace std;

string checkPrime(int num, int target)
{
    if (num < target)
    {
        int count = 0;
        for (int i = 1; i <= num; i++)
        {
            if (num % i == 0)
            {
                count++;
            }
        }
        if (count == 2)
        {
            return "Number is Prime and less than the target;";
        }
        else
        {
            return "Number is not Prime but less than the target;";
        }
    }
    else
    {
        int count = 0;
        for (int i = 1; i <= num; i++)
        {
            if (num % i == 0)
            {
                count++;
            }
        }
        if (count == 2)
        {
            return "Number is Prime but not less than the target;";
        }
        else
        {
            return "Number is not Prime and not less than the target;";
        }
    }
}

int main()
{
    int k, target;
    cout << "Enter a number : ";
    cin >> k;
    cout << "Enter the target : ";
    cin >> target;

    cout << checkPrime(k, target);

    return 0;
}

  18. Write a C++ function that takes a four-digit number as input and uses nested if-else statements to determine if it is a palindrome and if its digits form an arithmetic progression.

// Write a C++ function that takes a four-digit number as input and uses nested if-else statements to determine if it is a palindrome and if its digits form an arithmetic progression.

#include <bits/stdc++.h>
using namespace std;

bool isPalindrome(int num)
{
    int temp = num;
    int sum = 0;

    while (temp > 0)
    {
        int rem = temp % 10;
        sum = sum * 10 + rem;
        temp = temp / 10;
    }

    if (sum == num)
    {
        return true;
    }

    return false;
}

bool isArithmetic(int num)
{
    int a, b, c, d;
    int temp = num;

    a = temp % 10;
    temp = temp / 10;

    b = temp % 10;
    temp = temp / 10;

    c = temp % 10;
    temp = temp / 10;

    d = temp % 10;

    if (d - c == c - b && c - b == b - a)
    {
        return true;
    }

    return false;
}

string mainfunc(int num)
{
    if (num <= 9999 && num >= 1000)
    {
        if (isPalindrome(num))
        {
            if (isArithmetic(num))
            {
                return "Number is palindrome and digits are in AP";
            }
            else
            {
                return "Number is palindrome but digits are not in AP";
            }
        }
        else
        {
            if (isArithmetic(num))
            {
                return "Number is not palindrome but digits are in AP";
            }
            else
            {
                return "Number is not palindrome and digits are not in AP";
            }
        }
    }
    else
    {
        return "INVALID INPUT";
    }
}

int main()
{
    int k;
    cout << "Enter a 4-digit number : ";
    cin >> k;

    cout << mainfunc(k);

    return 0;
}

  19. Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is divisible by 4, 5, or 6, and if it is also a prime number.

#include <bits/stdc++.h>
using namespace std;

bool isPrime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i <= sqrt(num); ++i) {
        if (num % i == 0) return false;
    }
    return true;
}

string checkDivisibilityAndPrime(int num) {
    if (num % 4 == 0 || num % 5 == 0 || num % 6 == 0) {
        if (isPrime(num)) {
            return "Divisible by 4, 5, or 6 and is a Prime Number";
        } else {
            return "Divisible by 4, 5, or 6 but not a Prime Number";
        }
    } else {
        return "Not Divisible by 4, 5, or 6";
    }
}

int main() {
    int num;
    cout << "Enter an integer: ";
    cin >> num;

    string result = checkDivisibilityAndPrime(num);
    cout << result << endl;

    return 0;
}

  20. Write a C++ function that takes the lengths of three sides of a triangle as input and uses nested if-else statements to determine if the triangle is a right triangle, isosceles right triangle, or neither.

#include <iostream>
using namespace std;

string checkTriangle(int a, int b, int c) {
    // Ensure a, b, and c are in ascending order
    if (a > b) {
        int temp = a;
        a = b;
        b = temp;
    }
    if (b > c) {
        int temp = b;
        b = c;
        c = temp;
    }
    if (a > b) {
        int temp = a;
        a = b;
        b = temp;
    }

    if (a * a + b * b == c * c) { 
        if (a == b || b == c || a == c) {
            return "The triangle is an isosceles right triangle.";
        } else {
            return "The triangle is a right triangle.";
        }
    } else {
        return "The triangle is neither a right triangle nor an isosceles right triangle.";
    }
}

int main() {
    int a, b, c;
    cout << "Enter the lengths of three sides of the triangle: ";
    cin >> a >> b >> c;

    string result = checkTriangle(a, b, c);
    cout << result << endl;

    return 0;
}


  21. Write a C++ function that takes the marks of a student in three subjects as input and uses nested if-else statements to determine if the student passed all subjects, passed any one subject, or failed.

#include <bits/stdc++.h>
using namespace std;

string checkPassStatus(int marks1, int marks2, int marks3) {
    if (marks1 >= 40 && marks2 >= 40 && marks3 >= 40) {
        return "Passed All Subjects";
    } else if ((marks1 >= 40 && marks2 >= 40) || (marks1 >= 40 && marks3 >= 40) || (marks2 >= 40 && marks3 >= 40)) {
        return "Passed Any One Subject";
    } else {
        return "Failed";
    }
}

int main() {
    int marks1, marks2, marks3;
    cout << "Enter marks in three subjects: ";
    cin >> marks1 >> marks2 >> marks3;

    string result = checkPassStatus(marks1, marks2, marks3);
    cout << result << endl;

    return 0;
}

  22. Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is a perfect number (sum of divisors equals the number) or not.

#include <bits/stdc++.h>
using namespace std;

string checkPerfectNumber(int num) {
    int sum = 0;
    for (int i = 1; i <= num / 2; ++i) {
        if (num % i == 0) {
            sum += i;
        }
    }
    if (sum == num) {
        return "Perfect Number";
    } else {
        return "Not a Perfect Number";
    }
}

int main() {
    int num;
    cout << "Enter an integer: ";
    cin >> num;

    string result = checkPerfectNumber(num);
    cout << result << endl;

    return 0;
}

  23. Write a C++ function that takes a character as input and uses nested if-else statements to determine if it is a vowel and if it is uppercase or lowercase, or if it is a consonant.

#include <bits/stdc++.h>
using namespace std;

string checkVowelAndCase(char ch) {
    if (ch >= 'A' && ch <= 'Z') { 
        if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {
            return "Uppercase Vowel";
        } else {
            return "Uppercase Consonant";
        }
    } else if (ch >= 'a' && ch <= 'z') { 
        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
            return "Lowercase Vowel";
        } else {
            return "Lowercase Consonant";
        }
    } else {
        return "Not a Letter";
    }
}

int main() {
    char ch;
    cout << "Enter a character: ";
    cin >> ch;

    string result = checkVowelAndCase(ch);
    cout << result << endl;

    return 0;
}

  24. Write a C++ function that takes the year as input and uses nested if-else statements to determine if it is a century year (ends with 00) and if it is a leap year.

#include <bits/stdc++.h>
using namespace std;

string checkYear(int year) {
    if (year % 100 == 0) { 
        if (year % 400 == 0) {
            return "Century Year and Leap Year";
        } else {
            return "Century Year but Not a Leap Year";
        }
    } else {
        if (year % 4 == 0) {
            return "Not a Century Year but Leap Year";
        } else {
            return "Not a Century Year and Not a Leap Year";
        }
    }
}

int main() {
    int year;
    cout << "Enter a year: ";
    cin >> year;

    string result = checkYear(year);
    cout << result << endl;

    return 0;
}

  25. Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is a palindrome and if the sum of its digits is also a palindrome.
// Write a C++ function that takes an integer as input and uses nested if-else statements to determine if the number is a palindrome and if the sum of its digits is also a palindrome.

#include <bits/stdc++.h>
using namespace std;

bool isPalindrome(int num)
{
    int temp = num;
    int sum = 0;

    while (temp > 0)
    {
        int rem = temp % 10;
        sum = sum * 10 + rem;
        temp = temp / 10;
    }

    if (sum == num)
    {
        return true;
    }

    return false;
}

string mainfunc(int num)
{
    int temp = num;
    int sum = 0;

    while (temp > 0)
    {
        int rem = temp % 10;
        sum = sum + rem;
        temp = temp / 10;
    }

    if (isPalindrome(num))
    {
        if (isPalindrome(sum))
        {
            return "Number is palindrome and sum of digits of number is also palindrome";
        }
        else
        {
            return "Number is palindrome but sum of digits of number is not palindrome";
        }
    }
    else
    {
        if (isPalindrome(sum))
        {
            return "Number is not  palindrome but sum of digits of number is palindrome";
        }
        else
        {
            return "Number is not palindrome and sum of digits of number is also not palindrome";
        }
    }
}

int main()
{
    int k;
    cout << "Enter a number : ";
    cin >> k;

    cout << mainfunc(k);

    return 0;
}